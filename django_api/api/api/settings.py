"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 4.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from datetime import timedelta
from distutils.util import strtobool
from pathlib import Path

from dotenv import load_dotenv

load_dotenv()  # pyright: ignore[reportUnusedCallResult]
# Read .env file
# env = environ.Env()s
# environ.Env.read_env(".env")

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-xi8za@kq+q)#tek@7d$j*hq!_e)a+r5(4w94&e9x5gh0yfibrm"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = (os.getenv("ALLOWED_HOSTS") or "").split(",") or [
    "0.0.0.0",
    "127.0.0.1",
    "localhost",
]

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "account",
    "monobank",
    "django_celery_results",
    "django_celery_beat",
    "debug_toolbar",
    "corsheaders",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    # 'middleware.TestUserMiddleware',
]

ROOT_URLCONF = "api.urls"
#
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "api.wsgi.application"

# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("DB_NAME"),
        "HOST": os.getenv("DB_HOST") if not os.getenv("DEBUG") else "localhost",
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
    }
    # if os.getenv("DB_MODE") == "prod"
    # else {
    #     "ENGINE": "django.db.backends.sqlite3",
    #     "NAME": "db",
    # }
}
print(DATABASES)

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
AUTH_USER_MODEL = "account.User"
UPDATE_LAST_LOGIN = True
REST_FRAMEWORK = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=30),
    "USER_ID_FIELD": "tg_id",
    "DEFAULT_AUTHENTICATION_CLASSES": [
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ],
    "DEFAULT_PERMISSION_CLASSES": [
        # 'rest_framework.permissions.AllowAny',
        "rest_framework.permissions.IsAuthenticated",
        # 'rest_framework.permissions.IsAdminUser',
    ],
    # "DEFAULT_RENDERER_CLASSES": ('djangorestframework_camel_case.render.CamelCaseJSONRenderer',
    #                              'djangorestframework_camel_case.render.CamelCaseBrowsableAPIRenderer',),
    "DEFAULT_PARSER_CLASSES": (
        "djangorestframework_camel_case.parser.CamelCaseJSONParser",
    ),
}

CELERY_BROKER_URL = "redis://0.0.0.0:6379/0"
CELERY_TIMEZONE = "Europe/Kiev"
CELERY_TASK_TRACK_STARTED = True
CELERY_TASK_TIME_LIMIT = 30 * 60
CELERY_RESULT_BACKEND = "django-db"
# CELERY_RESULT_BACKEND = "redis://localhost:6379"

# Fix for macOS fork issue
CELERY_WORKER_POOL = "solo"


# django setting.
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": "redis://127.0.0.1:6379/1",
    }
}
CELERY_CACHE_BACKEND = "default"
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"
INTERNAL_IPS = [
    # ...
    "127.0.0.1",
    "0.0.0.0",
    # ...
]

# if DEBUG:
#     import socket  # only if you haven't already imported this
#     hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
#     INTERNAL_IPS = [ip[: ip.rfind(".")] + ".1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]
DEBUG_TOOLBAR_PANELS = [
    "debug_toolbar.panels.history.HistoryPanel",
    "debug_toolbar.panels.versions.VersionsPanel",
    "debug_toolbar.panels.timer.TimerPanel",
    "debug_toolbar.panels.settings.SettingsPanel",
    "debug_toolbar.panels.headers.HeadersPanel",
    "debug_toolbar.panels.request.RequestPanel",
    "debug_toolbar.panels.sql.SQLPanel",
    "debug_toolbar.panels.staticfiles.StaticFilesPanel",
    "debug_toolbar.panels.templates.TemplatesPanel",
    "debug_toolbar.panels.cache.CachePanel",
    "debug_toolbar.panels.signals.SignalsPanel",
    "debug_toolbar.panels.redirects.RedirectsPanel",
    "debug_toolbar.panels.profiling.ProfilingPanel",
]

# LOGGING_CONFIG = None
#
# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "handlers": {
#         "console": {
#             "class": "loguru._handler.StreamHandler",
#             "level": "DEBUG",
#         },
#         "file": {
#             "class": "loguru._handler._AsyncFileHandler",
#             "filename": "/var/log/myapp.log",
#             "level": "DEBUG",
#         },
#     },
#     "loggers": {
#         "django": {
#             "handlers": ["console", "file"],
#             "level": "INFO",
#         },
#         "django.server": {
#             "handlers": ["console", "file"],
#             "level": "INFO",
#         },
#     },
# }


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "filters": {
        "require_debug_false": {
            "()": "django.utils.log.RequireDebugFalse",
        },
        "require_debug_true": {
            "()": "django.utils.log.RequireDebugTrue",
        },
    },
    "formatters": {
        # "django.server": {
        #     "()": "django.utils.log.ServerFormatter",
        #     "format": "[{server_time}] {message}",
        #     "style": "{",
        # }
        "standard": {
            "format": "{levelname} {asctime} {module} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "loguru": {"class": "api.logging.LoguruHandler"},
    },
    "loggers": {
        logger_name: {
            "handlers": ["loguru"],
            "level": "INFO",
            "propagate": False,
        }
        for logger_name in (
            "django",
            "django.request",
            "django.db.backends",
            "django.template",
            "core",
        )
    },
}

# CORS settings
CORS_ALLOW_ALL_ORIGINS = True  # For development only, restrict in production
# CORS_ALLOWED_ORIGINS = ['http://localhost:3000']  # Example for production

ADMIN_TG_ID = os.getenv("API_ADMIN_USERNAME")
ADMIN_PASSWORD = os.getenv("API_ADMIN_PASSWORD")

AUTOMATIC_ACCOUNT_REFRESH_MINUTES = (
    os.getenv("AUTOMATIC_ACCOUNT_REFRESH_MINUTES") or "45"
)
IS_CI_TEST = strtobool(os.getenv("IS_CI_TEST", "false"))
APPLY_MONOBANK_WEBHOOKS = strtobool(os.getenv("APPLY_MONOBANK_WEBHOOKS", "false"))
SHOULD_AUTO_FETCH_TRANSACTIONS = strtobool(
    os.getenv("SHOULD_AUTO_FETCH_TRANSACTIONS", "false")
)
IS_WORKER = strtobool(
    os.getenv("IS_WORKER", "false")
)  # should be ON in celery workers. Turned on in docker-compose
WEBHOOK_URL = os.getenv("WEBHOOK_URL", "")
CONSUMER_TG_BOT_TOKEN = os.getenv("BOT_TOKEN", "NOT_SET")
LOGGING_TG_BOT_TOKEN = os.getenv("BOT_TOKEN", "LOGS_BOT_TOKEN")
